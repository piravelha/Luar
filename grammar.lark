
?start: program

program: include_statement* statement*

block: "do" statement* return_statement "end"

?inline_block: statement* return_statement | block | expression

?statement: variable_declaration
          | inline_variable_declaration
          | function_declaration
          | inline_function_declaration
          | struct_declaration
          | function_call
          | method_statement
          | assignent_statement
          | empty

include_statement: "include" STRING

return_statement: "return" expression

method_statement: method_access

function_call: atom argument_list

argument_list: "(" (expression ("," expression)* ","?)? ")" | array

inline_function_declaration: "inline" NAME no_pattern_parameter_list "=" expression

function_declaration: "local" NAME parameter_list "=" expression

struct_declaration: "struct" NAME parameter_list? "=" object

no_pattern_parameter_list: "(" (NAME ("," NAME)* ","?)? ")"

parameter_list: "(" (optional_parameter ("," optional_parameter)* ","?)? ")"

?optional_parameter: pattern ("=" expression)? | pattern

inline_variable_declaration: "inline" NAME "=" expression

assignent_statement: NAME ASSIGN expression

variable_declaration: "local" pattern "=" expression

?pattern: name_pattern
        | array_pattern

name_pattern: NAME

array_pattern: "{" ((NAME | rest_pattern) ("," (NAME | rest_pattern))* ","?)? "}"

rest_pattern: "..." NAME

?expression: infix_expression
           | lambda_expression
           | if_expression
           | block


if_expression: "if" expression "then" inline_block "else" inline_block

method_access: (NAME | function_call) "." NAME argument_list

property_access: (NAME | function_call) "." NAME

lambda_expression: lambda_parameters "to" expression

?lambda_parameters: parameter_list | array_pattern | NAME

?infix_expression: infix_expression "@" atom log_expression | log_expression

?log_expression: log_expression LOG eq_expression | eq_expression

?eq_expression: eq_expression EQ rel_expression | rel_expression

?rel_expression: rel_expression REL add_expression | add_expression

?add_expression: add_expression ADD mul_expression | mul_expression

?mul_expression: mul_expression MUL pow_expression | pow_expression

?pow_expression: pow_expression POW bitwise_expression | bitwise_expression

?bitwise_expression: bitwise_expression BITWISE unary_expression | unary_expression

?unary_expression: UNARY atom | atom

?atom: table
     | object
     | array
     | index_expression
     | NUMBER
     | STRING
     | BOOLEAN
     | NIL
     | TEMPLATE_LITERAL
     | NAME
     | OPERATOR_ALONE
     | function_call
     | property_access
     | method_access
     | "(" expression ")"

index_expression: expression "[" expression (":" (expression | empty))? (":" expression)? "]"

table: "{" (table_field ("," table_field)* ","?)? "}"

table_field: "[" expression "]" "=" expression

object: "{" ((object_field | operator_field) ("," (object_field | operator_field))* ","?)? "}"

operator_field: "operator" OPERATOR parameter_list "=" expression

object_field: NAME parameter_list? "=" expression

array: "{" (expression ("," expression)* ","?)? "}"

empty:

ASSIGN: /=|\+=|-=|\*=|\/=|%=|\^=|\/\/=|&=|\|=|~=|<<=|>>=/

UNARY: /not|-|\+|#|~/

BITWISE: /&|\||~|<<|>>/

POW: /\^/

MUL: /\*|\/\/|\/|%/

ADD: /\+|-|\.\./

REL: /<\=|>\=|<|>/

LOG: /and|or/

EQ: /==|!=/

OPERATOR: /\+|-|\*|\/\/|\/|unary_-|%|\^|&|\||~|unary_~|<<|>>|==|<|>|\.\.|unary_#|tostring/

OPERATOR_ALONE: /\((\+|-|\*|\/\/|\/|%|\^|&|\||~|<<|>>|==|!=|<=|>=|<|>|\.\.)\)/

NAME: /(?!(true|false|and|or|not|to|if|then|else|local|inline|struct|include|do|operator|return)\b)[a-zA-Z_][a-zA-Z_0-9]*/

TEMPLATE_LITERAL: /`[^`]*`/

NIL: /nil/

BOOLEAN: /true|false/

STRING: /"[^"]*"/

NUMBER: /\d+(\.\d+)?/

%ignore /\s+/
%ignore /--.*/
%ignore /--\[\[(.|\n)*\]\]/