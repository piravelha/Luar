
?start: program

program: statement*

block: "do" statement* return_statement "end"

?statement: variable_declaration
          | inline_variable_declaration
          | function_declaration
          | inline_function_declaration
          | struct_declaration
          | function_call
          | empty

return_statement: expression

function_call: atom argument_list

argument_list: "(" (expression ("," expression)* ","?)? ")"

inline_function_declaration: "inline" NAME no_pattern_parameter_list "=" expression

function_declaration: "local" NAME parameter_list "=" expression

struct_declaration: "struct" NAME parameter_list? "=" object

no_pattern_parameter_list: "(" (NAME ("," NAME)* ","?)? ")"

parameter_list: "(" (pattern ("," pattern)* ","?)? ")"

inline_variable_declaration: "inline" NAME "=" expression

variable_declaration: "local" pattern "=" expression

?pattern: name_pattern
        | array_pattern

name_pattern: NAME

array_pattern: "{" ((NAME | rest_pattern) ("," (NAME | rest_pattern))* ","?)? "}"

rest_pattern: "..." NAME

?expression: log_expression
           | lambda_expression
           | property_access
           | method_access
           | block


method_access: atom ":" NAME argument_list

property_access: atom "." NAME

lambda_expression: lambda_parameters "to" expression

?lambda_parameters: parameter_list | NAME

?log_expression: log_expression LOG eq_expression | eq_expression

?eq_expression: eq_expression EQ rel_expression | rel_expression

?rel_expression: rel_expression REL add_expression | add_expression

?add_expression: add_expression ADD mul_expression | mul_expression

?mul_expression: mul_expression MUL unary_expression | unary_expression

?unary_expression: UNARY atom | atom

?atom: function_call
     | table
     | object
     | array
     | NUMBER
     | STRING
     | TEMPLATE_LITERAL
     | NAME

table: "{" (table_field ("," table_field)* ","?)? "}"

table_field: "[" expression "]" "=" expression

object: "{" (object_field ("," object_field)* ","?)? "}"

object_field: NAME parameter_list? "=" expression

array: "{" (expression ("," expression)* ","?)? "}"

empty:

UNARY: /not|-|\+|#/

MUL: /\*|\/|%/

ADD: /\+|-|\.\./

REL: /<|>|<=|>=/

LOG: /and|or/

EQ: /==|~=/

NAME: /[a-zA-Z_][a-zA-Z_0-9]*/

TEMPLATE_LITERAL: /`[^`]*`/

STRING: /"[^"]*"/

NUMBER: /\d+/

%ignore /\s+/
%ignore /--.*/
%ignore /--\[\[(.|\n)*\]\]/