
let max(a, b) = if a > b then a else b

let min(a, b) = if a < b then a else b

-- let sqrt(x) = x ^ 0.5

let exp(x) = Math.e ^ x

let log(x) = math.log(x)

let log10(x) = math.log10(x)

let sin(x) = math.sin(x)

let cos(x) = math.cos(x)

let tan(x) = math.tan(x)

let asin(x) = math.asin(x)

let acos(x) = math.acos(x)

let atan(x) = math.atan(x)

let sinh(x) = math.sinh(x)

let cosh(x) = math.cosh(x)

let tanh(x) = math.tanh(x)

let ceil(x) = math.ceil(x)

let floor(x) = math.floor(x)

-- let round(x) = math.floor(x + 0.5)

let abs(x) = math.abs(x)

let mod(x, y) = x % y

let pow(x, y) = x ^ y

let clamp(x, min, max) = Math.max(min, Math.min(max, x))

let factorial(n) = if n == 0
    then 1
    else n * Math.factorial(n - 1)

let gcd(a, b) = if b == 0
    then a
    else Math.gcd(b, a % b)

let lcm(a, b) = a * b / Math.gcd(a, b)

let binomial(n, k) = do
    let product_range(a, b, acc = 1) = if a <= b
        then product_range(a + 1, b, acc * a)
        else acc
    return if k > n then 0
    else if k == 0 or k == n then 1
    else do
        let new_k = Math.min(k, n - k)
        return product_range(n - k + 1, n) // product_range(1, k)
    end
end

let dot(a, b, acc = 0) = do
    assert(#a == #b, "Math.dot(): vectors must have the same length")
    return if #a == 0
        then acc
        else Math.dot(a[2:], b[2:], acc + a[1] * b[1])
end

let cross(a, b) = do
    assert(#a == 3 and #b == 3, "Math.cross(): vectors must have length 3")
    return {
        a[2] * b[3] - a[3] * b[2],
        a[3] * b[1] - a[1] * b[3],
        a[1] * b[2] - a[2] * b[1]
    }
end

struct Constants = {
--    e = 2.71828182845904523536,
--    pi = 3.14159265358979323846,
}

